//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `background`.
    var background: RswiftResources.ColorResource { .init(name: "background", path: [], bundle: bundle) }

    /// Color `gradient1`.
    var gradient1: RswiftResources.ColorResource { .init(name: "gradient1", path: [], bundle: bundle) }

    /// Color `gradient2`.
    var gradient2: RswiftResources.ColorResource { .init(name: "gradient2", path: [], bundle: bundle) }

    /// Color `orange`.
    var orange: RswiftResources.ColorResource { .init(name: "orange", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 2 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `earth`.
    var earth: RswiftResources.ImageResource { .init(name: "earth", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `imagePlaceholder`.
    var imagePlaceholder: RswiftResources.ImageResource { .init(name: "imagePlaceholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `OpenSans`.
    var openSans: RswiftResources.FontResource { .init(name: "OpenSans", bundle: bundle, filename: "OpenSans-Regular.ttf") }

    /// Font `OpenSans-Bold`.
    var openSansBold: RswiftResources.FontResource { .init(name: "OpenSans-Bold", bundle: bundle, filename: "OpenSans-Bold.ttf") }

    /// Font `OpenSans-Semibold`.
    var openSansSemibold: RswiftResources.FontResource { .init(name: "OpenSans-Semibold", bundle: bundle, filename: "OpenSans-Semibold.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [openSans, openSansBold, openSansSemibold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 4 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `OpenSans-Bold.ttf`.
    var openSansBoldTtf: RswiftResources.FileResource { .init(name: "OpenSans-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `OpenSans-Regular.ttf`.
    var openSansRegularTtf: RswiftResources.FileResource { .init(name: "OpenSans-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `OpenSans-Semibold.ttf`.
    var openSansSemiboldTtf: RswiftResources.FileResource { .init(name: "OpenSans-Semibold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `response.json`.
    var responseJson: RswiftResources.FileResource { .init(name: "response", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }
  }
}